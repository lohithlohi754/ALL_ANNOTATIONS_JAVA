					HIBERNATE
@Entity
	To make a class as entity class
	An Entity class which repreesents a table in relational database
	Entity class name considered as table name,variable=column names and objects =data
@Id
	The @id annotation is inherited from javax.persistence.id
	This annotation is used to make a column as primary key in the database
@OneToOne
	One row of One table is associated with another row of another table
	One Person One Pan
@OneToMany
	One row of one table is assosiated with many row's of another table
	One pesrone having many accounts may accounts are associated with only one person
@ManyToOne
	Many row's of one table is associated with one row of another table
	Many branches are associated with only one hospital
@ManyToMany
	Many row's of one table is associated with many row's of another table
	Many students many courses
@Cacheable
	To enable caching behavior for any entity we anotate's that class with @Cacheable
	If we have multiple sourses (multiple entity manager's) then we enable second level cache
@Cascade
	Cascading is a feature in Hibernate, which is used to manage the state of the mapped entity 
	whenever the state of its relationship owner (superclass) affected.When the relationship owner (superclass) is saved/ deleted,
	 then the mapped entity associated with it should also be saved/ deleted automatically
	When we perform some action on the target entity, the same action will be applied to the associated entity
@GeneratedValue
	When we apply this annotation to our primary key column or property it will instruct 
	hibernate to automatically generate a unique value for that field during the process of
	persisting the data into database 
@JoinColumn
	It is used to specify the mapping of a foreign key column in a relationship between two tables
	Simply we can say to avoid duplicate table (@ManyToMany)
@JoinTable
	It is used to modify the fields or properties of extra created table

					SPRING IOC
@Component
	 Indicates that an annotated class is a “component”. Such classes are considered as candidates for
	 auto-detection when using annotation-based configuration and classpath scanning
	It is used to specify pojo classes for ioc container
@Configuration
	Used to indicate that a class declares one or more @Bean methods.
	 These classes are processed by the Spring container to generate bean definitions and
	 service requests for those beans at runtime.It is used to specify bean definitions
@ComponentScan
	Configures component scanning directives for use with @Configuration classes. 
	Here we can specify the base packages to scan for spring components
@Bean
	Indicates that a method produces a bean to be managed by the Spring container. 
	@Bean annotation also can be used with parameters like name,  init( ) Method and  destroy( ) Method.
	To instantiate 3rd party classes or interfaces
@Autowired
	It is used for automatic injection when we have dependency
@Qualifier
	@Qualifier annotation in Spring is used to differentiate a bean among the same type of bean objects.
	 @Qualifier annotation along with @Autowired to specify which exact bean will be wired.
@Primary
	When there are multiple beans available of same type in Spring container, 
	all of them are qualified to be autowired to single-valued dependency. 
	That causes ambiguity and leads to throw an exception by framework. 
	@Primary indicates that a bean should be given preference when multiple candidates are qualified to 
	autowire a single-valued dependency
@Value
	This annotation can be used for injecting values into fields in Spring-managed beans, 
	and it can be applied at the field or constructor/method parameter level

					SPRING MVC
@Controller
	To make a class as controller class
	The @Controller annotation indicates that a particular class serves the role of a controller
	This will specify's the ioc container this is the controller class
@RequestMapping
	One of the most important annotations in spring is the @RequestMapping Annotation 
	which is used to map HTTP requests to handler methods of MVC and REST controllers. In Spring MVC applications, 
	the DispatcherServlet (Front Controller) is responsible for routing incoming HTTP requests to handler methods of controllers. 
@ModelAttribute
	The @ModelAttribute annotation binds a method parameter or method return value to a named model attribute and
	 then exposes it to a web view.
@PathVariable
	 @PathVariable annotation is used to extract the value from the URI. 
	It is most suitable for the RESTful web service where the URL contains some value.
@Configuration
	@Configuration annotation which indicates that the class has @Bean definition methods. 
	So Spring container can process the class and generate Spring Beans to be used in the application. 
	This annotation is part of the spring core framework
@ComponentSacn
	@ComponentScan annotation along with the @Configuration annotation to specify the packages that we want to be scanned.
	 @ComponentScan without arguments tells Spring to scan the current package and all of its sub-packages.

					SPRING BOOT
@Component
	Application components and their variants are automatically registered as Spring Beans, 
	providing dependency injection, provided you use either @SpringBootApplication or @ComponentScan.
	@Repositry, @Controller, and @Service are move specific alternatives to @Componenet.
@EntitySacn
	This annotation is used to configure all the entity classes to spring
@Controller
	@Controller is a specialized @Component marked as a controller in MVC architecture.
@EnableJpaRepositories
	This annotation is used to enable jpa repository and configure the sub-interface of jpa repository
@RestController
	@RestController combines the @Controller and @ResponseBody into a single annotation. 
	@RestController classes return domains instead of views.
	It converts java code into raw data
@PostMapping
	 It maps the HTTP POST requests on the specific handler method. 
	It is used to create a web service endpoint that persist data into database.
@GetMapping
	It maps the HTTP GET requests on the specific handler method. 
	It is used to create a web service endpoint that fetches data from database.
@PutMapping
	It maps the HTTP PUT requests on the specific handler method. 
	It is used to create a web service endpoint that creates or updates data.
@DeleteMapping
	 It maps the HTTP DELETE requests on the specific handler method. 
	It is used to create a web service endpoint that deletes a resource.
@RequestBody
	It is used to bind HTTP request with an object in a method parameter. 
	Internally it uses HTTP MessageConverters to convert the body of the request.
	 When we annotate a method parameter with @RequestBody, the Spring framework binds 
	the incoming HTTP request body to that parameter.(From Json Body)
@ResponseBody
	It will converts java object into JSON Object (Raw data)
@RequstParam
	It is used to extract the query parameters form the URL. 
	It is also known as a query parameter. It is most suitable for web applications. 
	It can specify default values if the query parameter is not present in the URL.
@SpringBootApplication
	This annotation is used to mark the main class of a Spring Boot application. 
	It encapsulates @SpringBootConfiguration, @EnableAutoConfiguration, 
	and @ComponentScan annotations with their default attributes.
@SpringBootConfiguration
	It is a class-level annotation that is part of the Spring Boot framework. 
	It implies that a class provides Spring Boot application configuration. 
	It can be used as an alternative to Spring’s standard @Configuration annotation
	 so that configuration can be found automatically. Most Spring Boot Applications use @SpringBootConfiguration via
	 @SpringBootApplication. If an application uses @SpringBootApplication, it is already using @SpringBootConfiguration.
@EnableAutoConfiguration
	This annotation auto-configures the beans that are present in the classpath. 
	It simplifies the developer’s work by assuming the required beans from the classpath and 
	configure it to run the application. This annotation is part of the spring boot framework
@ComponentScan
	@ComponentScan tells Spring in which packages you have annotated classes that should be managed by Spring
@RestControllerAdvice
	@RestControllerAdvice is a composed annotation that is annotated with both @ControllerAdvice and @ResponseBody , 
	which essentially means @ExceptionHandler methods are rendered to the response body through message conversion
@ExceptionHandler
	It is used to handle exceptions at the method level with in a controller,When an exception occurs in a method annotated with
	@ExceptionHandler ,the specified method is invoked to handle specific Exception.